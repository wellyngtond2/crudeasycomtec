// <auto-generated />
using System;
using CrudNetAngular.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CrudNetAngular.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CrudNetAngular.Core.Models.Developer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Linkedin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Portfolio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Developer");
                });

            modelBuilder.Entity("CrudNetAngular.Core.Models.Knowledge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Knowledge");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68cb2a70-a724-476c-84df-efb1de9f3a9a"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 213, DateTimeKind.Local).AddTicks(3980),
                            Description = "Ionic",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("febb2742-2a1e-452a-ab4e-76940fd3c4eb"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(5819),
                            Description = "ReactJS",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("942e7cd0-d0c3-4f73-b346-f1d272037975"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(5858),
                            Description = "React Native",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4fd0203a-f6f0-4686-9f2b-0c7cb68ac410"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(5862),
                            Description = "Android",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("63dbd2d7-6450-40ab-9d03-416058ee4936"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6061),
                            Description = "Flutter",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("74f97f1c-4f06-4940-becb-de4351de2bd7"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6069),
                            Description = "SWIFT",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2efad335-9f6c-43af-90bd-0c8963cb3e3e"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6071),
                            Description = "IOS",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9f447cd2-f2a6-4687-ad03-9731ab96c30f"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6073),
                            Description = "HTML",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1db3f042-1314-4d11-8268-3853015d9489"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6084),
                            Description = "CSS",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7b30cc40-461f-4877-965b-aa1f5e5884de"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6089),
                            Description = "Bootstrap",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a8993606-005d-4c2b-8124-aeb686299898"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6091),
                            Description = "Jquery",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a4ccaaf6-9155-4289-9595-16e9f4d7a70d"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6093),
                            Description = "AngularJs 1.*",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9e944f3b-0de4-4466-abde-24871c5a67dd"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6096),
                            Description = "Angular",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f2d2f3bb-a5b4-40fd-aeb3-a57a6906a619"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6098),
                            Description = "Java",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8365fce6-7dfd-4cdd-98ac-fbcafd888593"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6100),
                            Description = "Python",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3942580a-6bdf-4038-9e56-e6ff86cdb034"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6102),
                            Description = "Flask",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f9b0f5d4-fef5-4b5d-8cb4-2461deeb7784"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6107),
                            Description = "Asp.Net MVC",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("bec3c23d-5e03-4537-8649-0beec51c640a"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6111),
                            Description = "Asp.Net WebForm",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6f547101-64c2-44c6-a5ea-ca79f5d524d0"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6113),
                            Description = "C",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6a69721d-0013-45ab-a5d6-d058e9d52798"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6116),
                            Description = "C#",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9da390c4-0a5d-4e76-8272-e159b807d462"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6118),
                            Description = "NodeJS",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d8cfa9b0-5b32-4b15-9de2-55ba4e2a267f"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6120),
                            Description = "Express - NodeJs",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("25e438ae-6d5e-43d7-b279-6e81462ff527"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6123),
                            Description = "Cake",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fffcbc26-c2a4-42f2-82f5-fb1679b6bc6f"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6125),
                            Description = "Django",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("da4259eb-0b8e-41ca-8b75-cc84086c4a24"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6130),
                            Description = "Majento",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("14e4fc35-42e2-4edc-a8cb-3faf20ae74f4"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6132),
                            Description = "PHP",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("bf76668a-03c7-486a-9c76-1a6365a4497f"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6135),
                            Description = "Vue",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("76eab6b1-1aec-4f83-bb35-26d155521443"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6137),
                            Description = "Wordpress",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e6acee4d-79a6-4f96-aa4c-5c19bb764f5e"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6140),
                            Description = "Phyton",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7d4c46ad-463c-472c-9144-dc7fd7536421"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6142),
                            Description = "Ruby",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f32731e6-c9f6-4c62-8a7a-6e38dae852af"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6144),
                            Description = "My SQL Server",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2e997a11-00cf-4e58-b7e6-304465382c1d"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6146),
                            Description = "My SQL",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a3260526-80bd-4e66-bfb2-15d8e559e663"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6151),
                            Description = "Salesforce",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("db1b1b86-18d8-43d6-8068-9900d0a49158"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6164),
                            Description = "Photoshop",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a81f204b-52d9-4e3d-b1f4-26dd50db334f"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6166),
                            Description = "Illustrator",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("25e5d096-6949-4d36-a0f6-20d7b340d65c"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6169),
                            Description = "SEO",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("06d7fd7c-6f4c-44ae-ab8a-4f9f43fa7a17"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 214, DateTimeKind.Local).AddTicks(6171),
                            Description = "Laravel",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CrudNetAngular.Core.Models.Occupation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Occupation");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7394617b-ec6b-43b5-8563-a3bf74c1f310"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 216, DateTimeKind.Local).AddTicks(8215),
                            Description = "Up to 4 hours per day / Até 4 horas por dia",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6ab1820a-eb38-47c9-97b9-8568ac0dca43"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 216, DateTimeKind.Local).AddTicks(8296),
                            Description = "4 to 6 hours per day / De 4 á 6 horas por dia",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fe7caee7-3d22-4ef0-bbbd-87dfdf9c4a07"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 216, DateTimeKind.Local).AddTicks(8299),
                            Description = "6 to 8 hours per day /De 6 á 8 horas por dia",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("454a718f-0455-4f1a-baec-2d05f3079d5f"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 216, DateTimeKind.Local).AddTicks(8310),
                            Description = "Up to 8 hours a day (are you sure?) / Acima de 8 horas por dia (tem certeza?)",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d70cd70c-5645-4387-be36-6332ffbe2ab7"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 216, DateTimeKind.Local).AddTicks(8313),
                            Description = "Only weekends / Apenas finais de semana",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4ff59221-2b8e-4bfd-ad45-742246eb6453"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 216, DateTimeKind.Local).AddTicks(8319),
                            Description = "Morning (from 08:00 to 12:00) / Manhã (de 08:00 ás 12:00)",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cc769a13-e07f-4324-9ed9-7cf109b96c97"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 216, DateTimeKind.Local).AddTicks(8321),
                            Description = "Afternoon (from 1:00 p.m. to 6:00 p.m.) / Tarde (de 13:00 ás 18:00)",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("08ec925b-d649-4b45-9022-4bc7c1f2a6ad"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 216, DateTimeKind.Local).AddTicks(8324),
                            Description = "Night (7:00 p.m. to 10:00 p.m.) /Noite (de 19:00 as 22:00)",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1b97452d-8c75-43eb-9836-09cb63a2cd24"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 216, DateTimeKind.Local).AddTicks(8326),
                            Description = "Dawn (from 10 p.m. onwards) / Madrugada (de 22:00 em diante)",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8c105615-9743-4f31-9fae-9221ced4a02f"),
                            CreatedAt = new DateTime(2020, 5, 18, 1, 45, 6, 216, DateTimeKind.Local).AddTicks(8330),
                            Description = "Business (from 08:00 a.m. to 06:00 p.m.) / Comercial (de 08:00 as 18:00)",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CrudNetAngular.Core.Models.TalentBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CrudLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DeveloperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("HourPrice")
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("KnowledgePlus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.ToTable("TalentBase");
                });

            modelBuilder.Entity("CrudNetAngular.Core.Models.TalentBaseXKnowledge", b =>
                {
                    b.Property<Guid>("TalentBaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KnowledgeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TalentBaseId", "KnowledgeId");

                    b.HasIndex("KnowledgeId");

                    b.ToTable("TalentBaseXKnowledge");
                });

            modelBuilder.Entity("CrudNetAngular.Core.Models.TalentBaseXOccupation", b =>
                {
                    b.Property<Guid>("TalentBaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OccupationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TalentBaseId", "OccupationId");

                    b.HasIndex("OccupationId");

                    b.ToTable("TalentBaseXOccupation");
                });

            modelBuilder.Entity("CrudNetAngular.Core.Models.TalentBase", b =>
                {
                    b.HasOne("CrudNetAngular.Core.Models.Developer", "Developer")
                        .WithMany()
                        .HasForeignKey("DeveloperId");
                });

            modelBuilder.Entity("CrudNetAngular.Core.Models.TalentBaseXKnowledge", b =>
                {
                    b.HasOne("CrudNetAngular.Core.Models.Knowledge", "Knowledge")
                        .WithMany("TalentBaseXKnowledge")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrudNetAngular.Core.Models.TalentBase", "TalentBase")
                        .WithMany("TalentBaseXKnowledge")
                        .HasForeignKey("TalentBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrudNetAngular.Core.Models.TalentBaseXOccupation", b =>
                {
                    b.HasOne("CrudNetAngular.Core.Models.Occupation", "Occupation")
                        .WithMany("TalentBaseXOccupation")
                        .HasForeignKey("OccupationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrudNetAngular.Core.Models.TalentBase", "TalentBase")
                        .WithMany("TalentBaseXOccupation")
                        .HasForeignKey("TalentBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
